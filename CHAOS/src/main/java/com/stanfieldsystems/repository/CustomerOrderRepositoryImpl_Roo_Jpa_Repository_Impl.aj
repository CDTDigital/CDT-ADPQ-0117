// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stanfieldsystems.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.stanfieldsystems.CustomerOrder;
import com.stanfieldsystems.QCustomerOrder;
import com.stanfieldsystems.Status;
import com.stanfieldsystems.UserInfo;
import com.stanfieldsystems.repository.CustomerOrderRepositoryCustom;
import com.stanfieldsystems.repository.CustomerOrderRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect CustomerOrderRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CustomerOrderRepositoryImpl implements CustomerOrderRepositoryCustom;
    
    declare @type: CustomerOrderRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String CustomerOrderRepositoryImpl.ORDER_DATE = "orderDate";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String CustomerOrderRepositoryImpl.TOTAL_PRICE = "totalPrice";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CustomerOrder> CustomerOrderRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomerOrder customerOrder = QCustomerOrder.customerOrder;
        
        JPQLQuery<CustomerOrder> query = from(customerOrder);
        
        Path<?>[] paths = new Path<?>[] {customerOrder.orderDate,customerOrder.totalPrice};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ORDER_DATE, customerOrder.orderDate)
			.map(TOTAL_PRICE, customerOrder.totalPrice);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, customerOrder);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param status
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CustomerOrder> CustomerOrderRepositoryImpl.findByStatus(Status status, GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomerOrder customerOrder = QCustomerOrder.customerOrder;
        
        JPQLQuery<CustomerOrder> query = from(customerOrder);
        
        Assert.notNull(status, "status is required");
        
        query.where(customerOrder.status.eq(status));
        Path<?>[] paths = new Path<?>[] {customerOrder.orderDate,customerOrder.totalPrice};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ORDER_DATE, customerOrder.orderDate)
			.map(TOTAL_PRICE, customerOrder.totalPrice);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, customerOrder);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param userInfo
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CustomerOrder> CustomerOrderRepositoryImpl.findByUserInfo(UserInfo userInfo, GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomerOrder customerOrder = QCustomerOrder.customerOrder;
        
        JPQLQuery<CustomerOrder> query = from(customerOrder);
        
        Assert.notNull(userInfo, "userInfo is required");
        
        query.where(customerOrder.userInfo.eq(userInfo));
        Path<?>[] paths = new Path<?>[] {customerOrder.orderDate,customerOrder.totalPrice};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ORDER_DATE, customerOrder.orderDate)
			.map(TOTAL_PRICE, customerOrder.totalPrice);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, customerOrder);
    }
    
}
