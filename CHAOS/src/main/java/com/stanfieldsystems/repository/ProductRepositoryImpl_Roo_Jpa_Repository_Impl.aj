// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stanfieldsystems.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.stanfieldsystems.Category;
import com.stanfieldsystems.Product;
import com.stanfieldsystems.QProduct;
import com.stanfieldsystems.repository.ProductRepositoryCustom;
import com.stanfieldsystems.repository.ProductRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ProductRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: ProductRepositoryImpl implements ProductRepositoryCustom;
    
    declare @type: ProductRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.QUANTITY = "quantity";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.MSRP = "MSRP";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.PRICE = "price";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.DISCOUNT = "discount";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.CLIN = "CLIN";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.OEM = "OEM";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.OEM___NAME = "OEM_name";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.SKU = "SKU";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.UNIT_MEASURE = "unitMeasure";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String ProductRepositoryImpl.UNSPSC = "UNSPSC";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Product> ProductRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QProduct product = QProduct.product;
        
        JPQLQuery<Product> query = from(product);
        
        Path<?>[] paths = new Path<?>[] {product.name,product.description,product.quantity,product.MSRP,product.price,product.discount,product.CLIN,product.OEM,product.OEM_name,product.SKU,product.unitMeasure,product.UNSPSC};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, product.name)
			.map(DESCRIPTION, product.description)
			.map(QUANTITY, product.quantity)
			.map(MSRP, product.MSRP)
			.map(PRICE, product.price)
			.map(DISCOUNT, product.discount)
			.map(CLIN, product.CLIN)
			.map(OEM, product.OEM)
			.map(OEM___NAME, product.OEM_name)
			.map(SKU, product.SKU)
			.map(UNIT_MEASURE, product.unitMeasure)
			.map(UNSPSC, product.UNSPSC);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, product);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Product> ProductRepositoryImpl.findByCategory(Category category, GlobalSearch globalSearch, Pageable pageable) {
        
        QProduct product = QProduct.product;
        
        JPQLQuery<Product> query = from(product);
        
        Assert.notNull(category, "category is required");
        
        query.where(product.category.eq(category));
        Path<?>[] paths = new Path<?>[] {product.name,product.description,product.quantity,product.MSRP,product.price,product.discount,product.CLIN,product.OEM,product.OEM_name,product.SKU,product.unitMeasure,product.UNSPSC};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, product.name)
			.map(DESCRIPTION, product.description)
			.map(QUANTITY, product.quantity)
			.map(MSRP, product.MSRP)
			.map(PRICE, product.price)
			.map(DISCOUNT, product.discount)
			.map(CLIN, product.CLIN)
			.map(OEM, product.OEM)
			.map(OEM___NAME, product.OEM_name)
			.map(SKU, product.SKU)
			.map(UNIT_MEASURE, product.unitMeasure)
			.map(UNSPSC, product.UNSPSC);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, product);
    }
    
}
