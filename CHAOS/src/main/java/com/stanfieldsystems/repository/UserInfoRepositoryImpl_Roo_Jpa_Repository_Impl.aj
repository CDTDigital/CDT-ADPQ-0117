// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stanfieldsystems.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.stanfieldsystems.QUserInfo;
import com.stanfieldsystems.UserInfo;
import com.stanfieldsystems.UserRole;
import com.stanfieldsystems.repository.UserInfoRepositoryCustom;
import com.stanfieldsystems.repository.UserInfoRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect UserInfoRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: UserInfoRepositoryImpl implements UserInfoRepositoryCustom;
    
    declare @type: UserInfoRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UserInfoRepositoryImpl.USERNAME = "username";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UserInfoRepositoryImpl.DISPLAY_NAME = "displayName";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UserInfoRepositoryImpl.PASSWORD = "password";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UserInfoRepositoryImpl.EMAIL = "email";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UserInfoRepositoryImpl.PHONE = "phone";
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private static final String UserInfoRepositoryImpl.ADDRESS = "address";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<UserInfo> UserInfoRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QUserInfo userInfo = QUserInfo.userInfo;
        
        JPQLQuery<UserInfo> query = from(userInfo);
        
        Path<?>[] paths = new Path<?>[] {userInfo.username,userInfo.displayName,userInfo.password,userInfo.email,userInfo.phone,userInfo.address};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(USERNAME, userInfo.username)
			.map(DISPLAY_NAME, userInfo.displayName)
			.map(PASSWORD, userInfo.password)
			.map(EMAIL, userInfo.email)
			.map(PHONE, userInfo.phone)
			.map(ADDRESS, userInfo.address);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, userInfo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param userRole
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<UserInfo> UserInfoRepositoryImpl.findByUserRole(UserRole userRole, GlobalSearch globalSearch, Pageable pageable) {
        
        QUserInfo userInfo = QUserInfo.userInfo;
        
        JPQLQuery<UserInfo> query = from(userInfo);
        
        Assert.notNull(userRole, "userRole is required");
        
        query.where(userInfo.userRole.eq(userRole));
        Path<?>[] paths = new Path<?>[] {userInfo.username,userInfo.displayName,userInfo.password,userInfo.email,userInfo.phone,userInfo.address};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(USERNAME, userInfo.username)
			.map(DISPLAY_NAME, userInfo.displayName)
			.map(PASSWORD, userInfo.password)
			.map(EMAIL, userInfo.email)
			.map(PHONE, userInfo.phone)
			.map(ADDRESS, userInfo.address);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, userInfo);
    }
    
}
