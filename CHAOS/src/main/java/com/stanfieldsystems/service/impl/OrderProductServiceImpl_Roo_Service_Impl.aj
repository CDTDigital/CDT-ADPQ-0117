// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stanfieldsystems.service.impl;

import com.stanfieldsystems.CustomerOrder;
import com.stanfieldsystems.OrderProduct;
import com.stanfieldsystems.Product;
import com.stanfieldsystems.repository.OrderProductRepository;
import com.stanfieldsystems.service.api.OrderProductService;
import com.stanfieldsystems.service.impl.OrderProductServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect OrderProductServiceImpl_Roo_Service_Impl {
    
    declare parents: OrderProductServiceImpl implements OrderProductService;
    
    declare @type: OrderProductServiceImpl: @Service;
    
    declare @type: OrderProductServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     */
    private OrderProductRepository OrderProductServiceImpl.orderProductRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param orderProductRepository
     */
    @Autowired
    public OrderProductServiceImpl.new(OrderProductRepository orderProductRepository) {
        this.orderProductRepository = orderProductRepository;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderProduct
     */
    @Transactional
    public void OrderProductServiceImpl.delete(OrderProduct orderProduct) {
        // Clear bidirectional many-to-one child relationship with Product
        if (orderProduct.getProduct() != null) {
            orderProduct.getProduct().getOrderProducts().remove(orderProduct);
        }
        
        // Clear bidirectional many-to-one child relationship with CustomerOrder
        if (orderProduct.getCustomerOrder() != null) {
            orderProduct.getCustomerOrder().getOrderProducts().remove(orderProduct);
        }
        
        orderProductRepository.delete(orderProduct);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<OrderProduct> OrderProductServiceImpl.save(Iterable<OrderProduct> entities) {
        return orderProductRepository.save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void OrderProductServiceImpl.delete(Iterable<Long> ids) {
        List<OrderProduct> toDelete = orderProductRepository.findAll(ids);
        orderProductRepository.deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return OrderProduct
     */
    @Transactional
    public OrderProduct OrderProductServiceImpl.save(OrderProduct entity) {
        return orderProductRepository.save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return OrderProduct
     */
    public OrderProduct OrderProductServiceImpl.findOne(Long id) {
        return orderProductRepository.findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<OrderProduct> OrderProductServiceImpl.findAll(Iterable<Long> ids) {
        return orderProductRepository.findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<OrderProduct> OrderProductServiceImpl.findAll() {
        return orderProductRepository.findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long OrderProductServiceImpl.count() {
        return orderProductRepository.count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<OrderProduct> OrderProductServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return orderProductRepository.findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerOrder
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<OrderProduct> OrderProductServiceImpl.findByCustomerOrder(CustomerOrder customerOrder, GlobalSearch globalSearch, Pageable pageable) {
        return orderProductRepository.findByCustomerOrder(customerOrder, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param product
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<OrderProduct> OrderProductServiceImpl.findByProduct(Product product, GlobalSearch globalSearch, Pageable pageable) {
        return orderProductRepository.findByProduct(product, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerOrder
     * @return Long
     */
    public long OrderProductServiceImpl.countByCustomerOrder(CustomerOrder customerOrder) {
        return orderProductRepository.countByCustomerOrder(customerOrder);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param product
     * @return Long
     */
    public long OrderProductServiceImpl.countByProduct(Product product) {
        return orderProductRepository.countByProduct(product);
    }
    
}
